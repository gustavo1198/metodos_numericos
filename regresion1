import matplotlib.pyplot as plt

x= [8,16,24,32]
y = [4.1,4.5,5.1,6.1]
plt.plot(x,y,'rx')
plt.show()

def createMatrix(m,n,v):

   C = []

   for i in range(m):

       C.append([])

       for j in range(n):

           C[i].append(v)

   return C

 

def getDimensiones(A):

   return(len(A), len(A[0]))

 

def sumMatrices(A,B):

   Am,An = getDimensiones(A)

   Bm,Bn = getDimensiones(B)

   if Am != Bm or An!= Bn:

       print("Las dimensiones son diferentes")

       return[]

   C = createMatrix(Am,An,0)

   for i in range(Am):

       for j in range(An):

           C[i][j] = A[i][j] + B[i][j]

   return C

def mulMatrices(A,B):

   Am,An = getDimensiones(A)

   Bm,Bn = getDimensiones(B)

   if An != Bm:

       print("Las matrices no son conformables")

       return []

   C = createMatrix(Am,Bn,0)

   for i in range(Am):

       for j in range(Bn):

           for k in range(An):

               C[i][j] += A[i][k] * B[k][j]

   return C

   

def getMenorMatriz(A,r,c):

   m,n = getDimensiones(A)

   C = createMatrix(m-1,n-1,0)

   for i in range (m):

       if i == r:

           continue

       for j in range(n):

           if j == c:

               continue

           Ci = i

           if i > r:

                  Ci = i-1

           Cj = j

           if j > c:

               Cj = j-1

           C[Ci][Cj] = A[i][j]

 

   return C

 

def detMatriz(A):

   m,n = getDimensiones(A)

   if m != n:

       print("La matriz no es cuadrada")

       return -1

   if m == 1:

       return m

   if m == 2:

       return A[0][0]*A[1][1] - A[0][1]*A[1][0]

   det = 0

   for j in range(n):

       det += (-1)**(j)*A[0][j]*detMatriz(getMenorMatriz(A,0,j))

   return det

 

def getMatrizAdyacente(A):

   m,n = getDimensiones(A)

   C = createMatrix(m,n,0)

   for i in range(m):

       for j in range(n):

           C[i][j] = (-1)**(i+j)*detMatriz(getMenorMatriz(A,i,j))

   return C

 

def getMatrizTranspuesta(A):

   m,n = getDimensiones(A)

   C = createMatrix(n,m,0)

   for i in range(m):

       for j in range(n):

           C[j][i] = A[i][j]

   return C

 

def getMatrizInversa(A):

   detA = detMatriz(A)

   if detA == 0:

       print("La matriz no tiene inversa")

       return 0

   At = getMatrizTranspuesta(A)

   adyAt = getMatrizAdyacente(At)

   m,n = getDimensiones(A)

   C = createMatrix(m,n,0)

   for i in range(m):

       for j in range(n):

           C[i][j] = (1/detA)*adyAt[i][j]

   return C


def regPolinomial(grado,x,y):
    grado += 1
    A = createMatrix(grado,grado,0)
    for i in range(grado):
        for j in range(grado):
            A[i][j] = sum ( xi ** (i+j) for xi in x)
    C = createMatrix(grado,1,0)
    for i in range(grado):
        C[i][0] = sum ((xi**(i))*yi for xi,yi in zip(x,y))
    invA = getMatrizInversa(A)
    return mulMatrices(invA, C)

coef = regPolinomial(3,x,y)
print("coeficientes",coef)
